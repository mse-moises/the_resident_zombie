// Mocks generated by Mockito 5.0.16 from annotations
// in the_resident_zombie/test/features/user/presentation/create_user/bloc/create_user_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:the_resident_zombie/core/error/failures.dart' as _i9;
import 'package:the_resident_zombie/features/items/domain/entities/item_entity.dart'
    as _i10;
import 'package:the_resident_zombie/features/items/domain/repository/items_repository.dart'
    as _i2;
import 'package:the_resident_zombie/features/items/domain/usecase/get_backpack_from_numbers_usecase.dart'
    as _i6;
import 'package:the_resident_zombie/features/items/domain/usecase/get_items_type_usecase.dart'
    as _i7;
import 'package:the_resident_zombie/features/location/domain/usecases/get_location_usecase.dart'
    as _i5;
import 'package:the_resident_zombie/features/user/domain/entities/user_entity.dart'
    as _i12;
import 'package:the_resident_zombie/features/user/domain/repositories/user_repository.dart'
    as _i4;
import 'package:the_resident_zombie/features/user/domain/usecases/create_user_usecase.dart'
    as _i11;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeItemsRepository_0 extends _i1.Fake implements _i2.ItemsRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakeUserRepository_2 extends _i1.Fake implements _i4.UserRepository {}

class _FakeGetLocationUseCase_3 extends _i1.Fake
    implements _i5.GetLocationUseCase {}

class _FakeGetBackpackFromNumbersUsecase_4 extends _i1.Fake
    implements _i6.GetBackpackFromNumbersUsecase {}

/// A class which mocks [GetItemsTypeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetItemsTypeUseCase extends _i1.Mock
    implements _i7.GetItemsTypeUseCase {
  MockGetItemsTypeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ItemsRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeItemsRepository_0()) as _i2.ItemsRepository);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i10.ItemEntity>>> call(
          _i7.GetItemsTypeNoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  Future<_i3.Either<_i9.Failure, List<_i10.ItemEntity>>>.value(
                      _FakeEither_1<_i9.Failure, List<_i10.ItemEntity>>()))
          as _i8.Future<_i3.Either<_i9.Failure, List<_i10.ItemEntity>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [CreateUserUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateUserUsecase extends _i1.Mock implements _i11.CreateUserUsecase {
  MockCreateUserUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.UserRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeUserRepository_2()) as _i4.UserRepository);
  @override
  _i5.GetLocationUseCase get getLocationUsecase =>
      (super.noSuchMethod(Invocation.getter(#getLocationUsecase),
          returnValue: _FakeGetLocationUseCase_3()) as _i5.GetLocationUseCase);
  @override
  _i6.GetBackpackFromNumbersUsecase get getBackpackUsecase =>
      (super.noSuchMethod(Invocation.getter(#getBackpackUsecase),
              returnValue: _FakeGetBackpackFromNumbersUsecase_4())
          as _i6.GetBackpackFromNumbersUsecase);
  @override
  _i8.Future<_i3.Either<_i9.Failure, _i12.UserEntity>> call(
          _i11.CreateUserParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i3.Either<_i9.Failure, _i12.UserEntity>>.value(
              _FakeEither_1<_i9.Failure, _i12.UserEntity>())) as _i8
          .Future<_i3.Either<_i9.Failure, _i12.UserEntity>>);
  @override
  String toString() => super.toString();
}
